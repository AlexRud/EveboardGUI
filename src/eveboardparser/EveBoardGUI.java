/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package eveboardparser;

import java.awt.*;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.*;

/**
 *
 * @author Alex
 */
public class EveBoardGUI extends javax.swing.JFrame {

    HashMap<String, String> skillHash = new HashMap();  
    String[] shipTypes = {"Nightmare", "Machariel", "Vindicator", "Basilisk", "Scimitar"};
    
    /**
     * Creates new form EveBoardGUI
     */
    public EveBoardGUI() {
        initComponents();
        shipTypeCombox.setModel(new javax.swing.DefaultComboBoxModel(shipTypes));
        shipTypeCombox.setSelectedItem(1);
        skillTable.setAutoCreateRowSorter(true);
        skillTable.getTableHeader().setResizingAllowed(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eveboardLink = new javax.swing.JTextField();
        checkCharButton = new javax.swing.JButton();
        shipTypeCombox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        errorText = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        skillTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(500, 391));

        checkCharButton.setText("Check Char!");
        checkCharButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkCharButtonMouseClicked(evt);
            }
        });

        shipTypeCombox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Character Sheet");

        errorText.setEnabled(false);

        skillTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Skill Name", "Expected Level", "Current Level"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(skillTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eveboardLink, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(checkCharButton, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(shipTypeCombox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorText, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(errorText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shipTypeCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkCharButton)
                            .addComponent(eveboardLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkCharButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkCharButtonMouseClicked
        errorText.setText("");
        skillHash.clear();
        DefaultTableModel model = (DefaultTableModel) skillTable.getModel();
        model.setRowCount(0);
        getCharacter();        
        baseSkills();
        if(shipTypeCombox.getSelectedItem().equals("Scimitar")){scimitar();}else if(shipTypeCombox.getSelectedItem().equals("Basilisk")){basilisk();}
            else if(shipTypeCombox.getSelectedItem().equals("Nightmare")){nightmare();} else if(shipTypeCombox.getSelectedItem().equals("Machariel")){machariel();}
                else if(shipTypeCombox.getSelectedItem().equals("Vindicator")){vindicator();}        
    }//GEN-LAST:event_checkCharButtonMouseClicked

    private void checkSkill(String skillName, int skillLevel){        
        DefaultTableModel model = (DefaultTableModel) skillTable.getModel();
        String skillLvl = skillHash.get(skillName);
        if(skillLvl != null){
            int level = Integer.parseInt(skillLvl);
            if(level >= skillLevel){
                Object[] row = {skillName, skillLevel, level};                
                model.addRow(row);
            }
            else{
                Object[] row = {skillName, skillLevel, level};
                model.addRow(row);
            }
        }
        else{
            Object[] row = {skillName, skillLevel, 0};
            model.addRow(row);            
        }
    }  
    
    private void baseSkills(){
        checkSkill("Hull Upgrades", 5);
        checkSkill("Mechanics", 5);
        checkSkill("CPU Management", 5);
        checkSkill("Power Grid Management", 5);
        checkSkill("Capacitor Management", 4);
        checkSkill("Capacitor Systems Operation", 5);
        checkSkill("EM Shield Compensation", 4);
        checkSkill("Shield Management", 4);
        checkSkill("Shield Operation", 4);
        checkSkill("Tactical Shield Manipulation", 4);
        checkSkill("Acceleration Control", 4);
        checkSkill("Spaceship Command", 4);
        checkSkill("Navigation", 4);
        checkSkill("Evasive Maneuvering", 4);
        checkSkill("Warp Drive Operation", 4);
        checkSkill("Target Management", 4);
        checkSkill("Signature Analysis", 5);
        checkSkill("Long Range Targeting", 5);
        checkSkill("Drones", 5);
        checkSkill("Drone Interfacing", 4);
        checkSkill("Drone Navigation", 4);
        checkSkill("Drone Avionics", 3);
        checkSkill("Drone Durability", 3);
        checkSkill("Drone Sharpshooting", 3);
        checkSkill("Thermodynamics", 4);
        checkSkill("Nanite Interfacing", 4);
        checkSkill("Nanite Operation", 4); 
    }
    
    private void scimitar()
    {
        checkSkill("Minmatar Cruiser", 5);
        checkSkill("Logistics", 4);
        checkSkill("Shield Emission Systems", 4);
        checkSkill("Afterburner", 4);
        checkSkill("Fuel Conservation", 4);
        checkSkill("Advanced Target Management", 3);
        checkSkill("Repair Drone Operation", 4);   
        checkSkill("Light Drone Operation", 5);
        checkSkill("Minmatar Drone Specialization", 1);        
    }
    
    private void basilisk()
    {
        checkSkill("Caldari Cruiser", 5);
        checkSkill("Logistics", 4);
        checkSkill("Shield Emission Systems", 4);
        checkSkill("Capacitor Emission Systems", 4);
        checkSkill("Afterburner", 4);
        checkSkill("Fuel Conservation", 4);
        checkSkill("Advanced Target Management", 3);
        checkSkill("Repair Drone Operation", 4);   
        checkSkill("Light Drone Operation", 5);
        checkSkill("Minmatar Drone Specialization", 1);
        checkSkill("Repair Drone Operation", 4);        
    }
    
    private void vindicator()
    {
        checkSkill("Minmatar Battleship", 4);
        checkSkill("Gallente Battleship", 4);
        checkSkill("High Speed Maneuvering", 4);
        checkSkill("Controlled Bursts", 4);
        checkSkill("Gunnery", 5);
        checkSkill("Large Hybrid Turret", 4);        
        checkSkill("Motion Prediction", 4);
        checkSkill("Sharpshooter", 4);   
        checkSkill("Surgical Strike", 4);
        checkSkill("Trajectory Analysis", 4);
        checkSkill("Large Blaster Specialization", 1);  
        checkSkill("Heavy Drone Operation", 4);
        checkSkill("Light Drone Operation", 5);
        checkSkill("Medium Drone Operation", 5);
        checkSkill("Gallente Drone Specialization", 1);        
    }
    
    private void machariel()
    {
        checkSkill("Minmatar Battleship", 4);
        checkSkill("Gallente Battleship", 4);
        checkSkill("High Speed Maneuvering", 4);
        checkSkill("Science", 5);
        checkSkill("Gunnery", 5);
        checkSkill("Large Projectile Turret", 4);        
        checkSkill("Motion Prediction", 4);
        checkSkill("Sharpshooter", 4);   
        checkSkill("Surgical Strike", 4);
        checkSkill("Trajectory Analysis", 4);
        checkSkill("Large Artillery Specialization", 1);  
        checkSkill("Heavy Drone Operation", 4);
        checkSkill("Light Drone Operation", 5);
        checkSkill("Minmatar Drone Specialization", 1);        
    }
    
    private void nightmare()
    {
        checkSkill("Amarr Battleship", 4);
        checkSkill("Caldari Battleship", 1);
        checkSkill("High Speed Maneuvering", 4);
        checkSkill("Capacitor Emission Systems", 4);
        checkSkill("Gunnery", 5);
        checkSkill("Large Energy Turret", 4);        
        checkSkill("Motion Prediction", 4);
        checkSkill("Sharpshooter", 4);   
        checkSkill("Surgical Strike", 4);
        checkSkill("Trajectory Analysis", 4);
        checkSkill("Large Beam Laser Specialization", 1);  
        checkSkill("Heavy Drone Operation", 4);
        checkSkill("Light Drone Operation", 4);
        checkSkill("Gallente Drone Specialization", 1);        
    }
    
    private void getCharacter(){
        try {        
            URL oracle = new URL(eveboardLink.getText());
            try (BufferedReader in = new BufferedReader(new InputStreamReader(oracle.openStream()))) {
                String inputLine;
                while ((inputLine = in.readLine()) != null){
                    if(inputLine.contains("<td height=\"20\" class=\"dotted\" style=\"\"><span style=\"color: #FFCC00;\">") || inputLine.contains("<td height=\"20\" class=\"dotted\" style=\"\">")){                    
                        String s = inputLine.substring(inputLine.lastIndexOf(">")+1);
                        String skillName = s.substring(0, s.indexOf(" /"));
                        String levelfluff = in.readLine().trim();
                        String levelflu = levelfluff.substring(7, levelfluff.indexOf("SP: ")-3);
                        String level = levelflu; 
                        skillHash.put(skillName, level);
                    }
                    if(inputLine.contains("Error encountered")){errorText.setText("Bad URL");errorText.setForeground(Color.red);break;}
                }
            }
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(EveBoardGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(EveBoardGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EveBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EveBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EveBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EveBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EveBoardGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkCharButton;
    private javax.swing.JLabel errorText;
    private javax.swing.JTextField eveboardLink;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JComboBox shipTypeCombox;
    private javax.swing.JTable skillTable;
    // End of variables declaration//GEN-END:variables
}

